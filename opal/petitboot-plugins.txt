Petitboot plugins
=================

The petitboot plugin infrastructure is a facility for adding binaries to the
petitboot shell environment. For example, a RAID-hardware vendor can provide
a plugin that adds their devices' RAID configuration tools to the shell
environment, making it possible for users to perform RAID configuration from 
petitboot, before installing an operating system.

Plugins can be installed from storage devices (like a USB flash drive), or from
the network.

Essentialy, a plugin is just an archive of files to be extracted into the
petitboot filesystem, mostly for usage at the command-line. Plugins are not
persisted once you leave the petitboot environment.

The specification for petitboot plugins here:

 https://github.com/open-power/docs/blob/master/opal/petitboot-plugin-spec.txt

And the implementation:

 https://github.com/open-power/petitboot/blob/master/utils/pb-plugin

Using a petitboot plugin
------------------------

The 'pb-plugin' command at the petitboot shell is used to manage plugins
in the currently-running environment.

For network usage, installing done by:

    pb-plugin install <URL>

For removeable media, installing is a similar process:

    pb-plugin install </path/to/FILE>

To make the above easier, you can run:

    pb-plugin scan

\- to look for plugins that are present on attached storage, and print a list of
those found.

Here is an example of running a 'scan' with a plugin
present on a local USB drive:

    / # pb-plugin scan
    Plugin found on sda1:
    Sample co: Example petitboot plugin
      (version 1.01)
    
    To run this plugin:
      /usr/sbin/pb-plugin install /var/petitboot/mnt/dev/sda1/example.pb-plugin
    
Now that we know that there's a plugin present, we can install it as
indicated:

    / # pb-plugin install /var/petitboot/mnt/dev/sda1/example.pb-plugin 
    File 'example.pb-plugin' has the following sha256 checksum:

    e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855

    Do you want to install this plugin? (y/N)
    y
    1023 blocks
    Plugin installed
    Sample co: Example petitboot plugin
      (version 1.01)

Once the plugin is installed, the executables defined by the plugin are
available at the shell, like any other command.

Constructing a new plugin
-------------------------

A plugin is pretty simple: it's just the files that need to be added to
the petitboot environment, plus a bit of metadata. This is combined into
a compressed CPIO archive, with the extension .pb-plugin

The pb-plugin script can also be used as a helper to construct a plugin. First,
download the script from

 https://raw.githubusercontent.com/open-power/petitboot/master/utils/pb-plugin

and run:

    pb-plugin create <DIR>

\- this will create a plugin out of the contents of `<DIR>`.

This can be done from most Linux/UNIX installs, not just petitboot; the
pb-plugin script is a standard shell script, and can be used outside of
petitboot when you're constructing a plugin.

If no metadata definition is present under DIR (specifically, at
`<DIR>/etc/preboot-plugins/pb-plugin.conf`), then the script will prompt for
details, and create one. This can be edited later, if necessary.

The resulting .pb-plugin file can then be made available on the network
(accessible to the POWER machines), or copied to the top-level directory of a
USB/cdrom/etc device. Presence at the top level is not required, but does allow
the `pb-plugin scan` function to find it.

The binaries included in the plugin will need to be compatible with
the petitboot environment. Generally, this either means that any necessary
libraries are shipped in the plugin, or the binary is statically-linked.

Pre-distribution check
----------------------

Before distributing a new plugin, you can perform some basic checks on a with:

    pb-plugin lint <FILE.pb-plugin>

\- which will report on potential problems with the metadata.

Low level details on plugin runtime behaviour
---------------------------------------------

During installation, plugins are extracted into a new directory under `/tmp`.
This ensures that the contents of the plugin do not conflict with files in the
petitboot system.

When a user invokes one of the plugins provided in the binary, that binary is
executed in a "chroot" (an isolated filesystem structure) of that new directory.
This means that binaries can use any other resources in their archive, and
ensure that there are no conflicts with the rest of the petitboot environment
(including other plugins).

The caveat here is that the plugin cannot access resources outside of its own
shipped files, such as runtime libraries. This is somewhat intentional, as
the petitboot environment does not guarantee that those resources will remain
consistent across different builds & versions of petitboot environments.

So, if your plugin's binaries depend on any runtime libraries, or the dynamic
linker, those resources must be included in the plugin too.

When a plugin is installed into petitboot, the pb-plugin script performs the
following:

 - extracts the contents of the archive into a temporary directory

 - creates a wrapper script for each of the executables listed in the
   `PLUGIN_EXECUTABLES` metadata. These wrapper scripts are added to
   `/var/lib/pb-plugins/bin/<NAME>`, which is included in the default PATH.

These wrapper scripts handle all of the chroot setup, so that it is transparent
to the end user.

See the petitboot plugin specification at
https://github.com/open-power/docs/blob/master/opal/petitboot-plugin-spec.txt
for full implementation requirements.

Need help?
----------

If you need help constructing a plugin, contact the OPAL developers at
skiboot@lists.ozlabs.org.
